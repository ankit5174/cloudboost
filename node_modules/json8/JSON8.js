(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.JSON8 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict'

var types = require('./lib/types')
var Document = require('./lib/Document')

var oo = module.exports = function(doc) {
  return new Document(doc)
}

oo.clone = require('./lib/clone')
oo.Document = Document
oo.equal = require('./lib/equal')

oo.has = require('./lib/has')
oo.hasKey = require('./lib/hasKey')
oo.hasValue = require('./lib/hasValue')

oo.is = require('./lib/is')
oo.isArray = require('./lib/isArray')
oo.isBoolean = require('./lib/isBoolean')
oo.isJSON = require('./lib/isJSON')
oo.isNull = require('./lib/isNull')
oo.isNumber = require('./lib/isNumber')
oo.isObject = require('./lib/isObject')
oo.isPrimitive = require('./lib/isPrimitive')
oo.isString = require('./lib/isString')
oo.isStructure = require('./lib/isStructure')

oo.parse = require('./lib/parse')
oo.serialize = require('./lib/serialize')
oo.type = require('./lib/type')
for (var type in types)
  oo[type] = types[type]
oo.valid = require('./lib/valid')

// Document

;[
  'has',
  'hasKey',
  'hasValue',
  'is',
  'isArray',
  'isBoolean',
  'isJSON',
  'isNull',
  'isNumber',
  'isObject',
  'isPrimitive',
  'isString',
  'isStructure',
  'serialize',
  'type',
  'valid',
].forEach(function(method) {
  var fn = oo[method]
  Document.prototype[method] = function() {
    var args = [this.value].concat(arguments)
    return fn.apply(null, args)
  }
})

Document.prototype.toString = function() {
  return oo.serialize(this.value)
}

Document.prototype.clone = function() {
  return new Document(oo.clone(this.value))
}

Document.prototype.equal = function(obj) {
  return oo.equal(this.value, obj instanceof Document ? obj.value : obj)
}

Document.prototype.parse = function() {
  this.value = oo.parse.apply(null, [this.value].concat(arguments))
}

},{"./lib/Document":2,"./lib/clone":3,"./lib/equal":4,"./lib/has":5,"./lib/hasKey":6,"./lib/hasValue":7,"./lib/is":8,"./lib/isArray":9,"./lib/isBoolean":10,"./lib/isJSON":11,"./lib/isNull":12,"./lib/isNumber":13,"./lib/isObject":14,"./lib/isPrimitive":15,"./lib/isString":16,"./lib/isStructure":17,"./lib/parse":18,"./lib/serialize":19,"./lib/type":20,"./lib/types":21,"./lib/valid":22}],2:[function(require,module,exports){
'use strict'

var Document = function(value) {
  this.value = value // eslint-disable-line no-invalid-this
}

Document.prototype.toJSON = function() {
  return this.value
}

module.exports = Document

},{}],3:[function(require,module,exports){
(function (global){
'use strict'

var types = require('./types')
var OBJECT = types.OBJECT

module.exports = function clone(obj) {
  if (typeof obj !== OBJECT || obj === null)
    return obj

  var c, i, l

  if (Array.isArray(obj)) {
    c = []
    for (i = 0, l = obj.length; i < l; i++)
      c[i] = clone(obj[i])
  }
  else if (global.Set && obj instanceof Set) {
    c = new Set()
    obj.forEach(function(item) {
      c.add(clone(item))
    })
  }
  else if (global.Map && obj instanceof Map) {
    c = new Map()
    obj.forEach(function(value, key) {
      c.set(key, clone(value))
    })
  }
  else {
    c = {}
    var keys = Object.keys(obj)
    for (i = 0, l = keys.length; i < l; i++) {
      var key = keys[i]
      c[key] = clone(obj[key])
    }
  }

  return c
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./types":21}],4:[function(require,module,exports){
(function (global){
'use strict'

var types = require('./types')
var OBJECT = types.OBJECT
var ARRAY = types.ARRAY
var STRING = types.STRING
var BOOLEAN = types.BOOLEAN
var NUMBER = types.NUMBER
var NULL = types.NULL
var type = require('./type')

var toArray = function(set) {
  var array = []
  set.forEach(function(item) {
    array.push(item)
  })
  return array
}

var toObject = function(map) {
  var object = Object.create(null)
  map.forEach(function(value, key) {
    object[key] = value
  })
  return object
}

module.exports = function equal(a, b) {
  var ta = type(a)
  var tb = type(b)

  if (ta !== tb) return false

  var t = ta

  switch (t) {
  case NUMBER:
    if (a === 0 && (1 / a) === -Infinity)
      return b === 0 && (1 / b === -Infinity)
    return a === b
  case STRING:
  case NULL:
  case BOOLEAN:
      return a === b
  }

  var i, l
  if (t === ARRAY) {
    if (global.Set) {
      if (a instanceof Set) a = toArray(a)
      if (b instanceof Set) b = toArray(b)
    }
    if (a.length !== b.length) return false
    for (i = 0, l = a.length; i < l; i++)
      if (!equal(a[i], b[i])) return false
    return true
  }

  if (t === OBJECT) {
    if (global.Map) {
      if (a instanceof Map) a = toObject(a)
      if (b instanceof Map) b = toObject(b)
    }
    var keys = Object.keys(a)
    if (keys.length !== Object.keys(b).length) return false
    for (i = 0, l = keys.length; i < l; i++) {
      var key = keys[i]
      if (b.hasOwnProperty && !b.hasOwnProperty(key)) return false
      if (!equal(b[key], a[key])) return false
    }
    return true
  }

  return true
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./type":20,"./types":21}],5:[function(require,module,exports){
(function (global){
'use strict'

var hasValue = require('./hasValue')
var hasKey = require('./hasKey')

module.exports = function has(obj, key) {
  if (Array.isArray(obj) || (global.Set && obj instanceof Set))
    return hasValue(obj, key)

  return hasKey(obj, key)
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./hasKey":6,"./hasValue":7}],6:[function(require,module,exports){
(function (global){
'use strict'

var isObject = require('./isObject')
var equal = require('./equal')
var STRING = require('./types').STRING
var hasOwnProperty = Object.prototype.hasOwnProperty

module.exports = function hasKey(obj, key) {
  if (typeof key !== STRING) return false
  if (!isObject(obj)) return false

  if (global.Map && obj instanceof Map) {
    var entries = obj.keys()
    for (var i = 0, l = obj.size; i < l; i++) {
      var k = entries.next().value
      if (equal(k, key)) return obj.get(k) !== undefined
    }
    return false
  }

  return hasOwnProperty.call(obj, key) && obj[key] !== undefined
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./equal":4,"./isObject":14,"./types":21}],7:[function(require,module,exports){
(function (global){
'use strict'

var OBJECT = require('./types').OBJECT
var equal = require('./equal')

module.exports = function has(obj, value) {
  if (value === undefined) return false
  if (typeof obj !== OBJECT || obj === null) return false

  var i, l

  if (Array.isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      if (equal(obj[i], value)) return true
    }
    return false
  }

  if ((global.Map && obj instanceof Map) || (global.Set && obj instanceof Set)) {
    var entries = obj.entries()
    for (i = 0, l = obj.size; i < l; i++) {
      var item = entries.next().value
      if (equal(item[1], value) && item[0] !== undefined) return true
    }
    return false
  }

  var keys = Object.keys(obj)
  for (i = 0, l = keys.length; i < l; i++) {
    var key = keys[i]
    if (equal(obj[key], value)) return true
  }

  return false
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./equal":4,"./types":21}],8:[function(require,module,exports){
'use strict'

var types = require('./types')
var NUMBER = types.NUMBER
var OBJECT = types.OBJECT
var BOOLEAN = types.BOOLEAN
var STRING = types.STRING
var NULL = types.NULL
var ARRAY = types.ARRAY

var methods = Object.create(null)
methods[ARRAY] = require('./isArray')
methods[BOOLEAN] = require('./isBoolean')
methods.JSON = require('./isJSON')
methods[NULL] = require('./isNull')
methods[NUMBER] = require('./isNumber')
methods[OBJECT] = require('./isObject')
methods.primitive = require('./isPrimitive')
methods[STRING] = require('./isString')
methods.structure = require('./isStructure')

module.exports = function is(obj, type) {
  var fn = methods[type]
  if (!fn)
    throw new Error(type + ' is not a valid type')
  return fn(obj)
}

},{"./isArray":9,"./isBoolean":10,"./isJSON":11,"./isNull":12,"./isNumber":13,"./isObject":14,"./isPrimitive":15,"./isString":16,"./isStructure":17,"./types":21}],9:[function(require,module,exports){
(function (global){
'use strict'

module.exports = !global.Set ? Array.isArray : function isArray(obj) {
  return Array.isArray(obj) || obj instanceof Set
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],10:[function(require,module,exports){
'use strict'

var BOOLEAN = require('./types').BOOLEAN

module.exports = function isBoolean(obj) {
  return typeof obj === BOOLEAN
}

},{"./types":21}],11:[function(require,module,exports){
'use strict'

var types = require('./types')
var NUMBER = types.NUMBER
var OBJECT = types.OBJECT
var BOOLEAN = types.BOOLEAN
var STRING = types.STRING

module.exports = function isJSON(obj) {
  var type = typeof obj
  return type === BOOLEAN || type === STRING || type === OBJECT || (type === NUMBER && isFinite(obj))
}

},{"./types":21}],12:[function(require,module,exports){
'use strict'

module.exports = function isNull(obj) {
  return obj === null
}

},{}],13:[function(require,module,exports){
'use strict'

var NUMBER = require('./types').NUMBER

module.exports = function isNumber(obj) {
  return (typeof obj === NUMBER && isFinite(obj))
}

},{"./types":21}],14:[function(require,module,exports){
(function (global){
'use strict'

var isArray = require('./isArray')
var OBJECT = require('./types').OBJECT

module.exports = (global.Map
  ? function isObject(obj) {
    return (obj instanceof Map || typeof obj === OBJECT && obj !== null && !isArray(obj))
  }
  : function isObject(obj) {
    return typeof obj === OBJECT && obj !== null && !isArray(obj)
  }
)

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./isArray":9,"./types":21}],15:[function(require,module,exports){
'use strict'

var types = require('./types')
var BOOLEAN = types.BOOLEAN
var STRING = types.STRING
var NUMBER = types.NUMBER

module.exports = function isPrimitive(obj) {
  if (obj === null)
    return true

  var type = typeof obj
  if (type === NUMBER && isFinite(obj))
    return true

  return (type === BOOLEAN || type === STRING || obj === null)
}

},{"./types":21}],16:[function(require,module,exports){
'use strict'

var STRING = require('./types').STRING

module.exports = function isString(obj) {
  return typeof obj === STRING
}

},{"./types":21}],17:[function(require,module,exports){
'use strict'

var OBJECT = require('./types').OBJECT

module.exports = function isStructure(obj) {
  return typeof obj === OBJECT && obj !== null
}

},{"./types":21}],18:[function(require,module,exports){
'use strict'

var OBJECT = require('./types').OBJECT

var replace = function(obj, options) {
  var i
  var l

  if (Array.isArray(obj)) {
    if (options.set === true) {
      var set = new Set()
      for (i = 0, l = obj.length; i < l; i++)
        set.add(replace(obj[i], options))
      return set
    }
    for (i = 0, l = obj.length; i < l; i++)
      obj[i] = replace(obj[i], options)
    return obj
  }

  if (typeof obj === OBJECT && obj !== null) {
    var keys = Object.keys(obj)
    var key
    if (options.map === true) {
      var map = new Map()
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i]
        map.set(key, replace(obj[key], options))
      }
      return map
    }
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i]
      obj[key] = replace(obj[key], options)
    }
    return obj
  }

  return obj
}

module.exports = function parse(string, options) {
  var obj = JSON.parse(string)

  if (typeof options !== OBJECT || options === null)
    return obj

  return replace(obj, options)
}

},{"./types":21}],19:[function(require,module,exports){
(function (global){
'use strict'

/* eslint-disable no-magic-numbers */

var types = require('./types')
var OBJECT = types.OBJECT
var NUMBER = types.NUMBER
var STRING = types.STRING
var BOOLEAN = types.BOOLEAN

// temporary workaround
// https://github.com/babel/babel/issues/2217
if (global.Map && Map.prototype.toJSON)
  delete Map.prototype.toJSON
if (global.Set && Set.prototype.toJSON)
  delete Set.prototype.toJSON

var stringify = function(obj, opts) {
  if (opts.toJSON === true && typeof obj === OBJECT && obj !== null && typeof obj.toJSON === 'function')
    obj = obj.toJSON()

  var type = typeof obj

  switch (type) {
    case BOOLEAN:
      return obj.toString()
    case STRING:
      return JSON.stringify(obj)
    case NUMBER:
      if (!isFinite(obj))
        throw new TypeError(obj + ' is not JSON valid')
      if (obj === 0 && (1 / obj) === -Infinity)
        return '-0'
      return obj.toString()
  }

  if (obj === null)
    return 'null'

  var replacer = opts.replacer
  var str = ''

  if (Array.isArray(obj)) {
    str += '['
    for (var i = 0, l = obj.length; i < l; i++) {
      var item = obj[i]
      if (replacer) {
        item = replacer.call(obj, i, item)
        if (item === undefined) {
          if (i === l - 1 && str.length > 1) str = str.slice(0, -1)
          continue
        }
      }
      str += stringify(item, opts)
      if (i !== l - 1) str += ','
    }
    str += ']'
  }
  else if (global.Set && obj instanceof Set) {
    str += '['
    var n = 0
    obj.forEach(function(setItem) {
      if (replacer) {
        setItem = replacer.call(obj, setItem, setItem)
        if (setItem === undefined) {
          if (n === obj.size - 1 && str.length > 1) str = str.slice(0, -1)
          n++
          return
        }
      }
      str += stringify(setItem, opts)
      if (n++ !== obj.size - 1) str += ','
    })
    str += ']'
  }
  else if (global.Map && obj instanceof Map) {
    str += '{'
    var m = 0
    obj.forEach(function(v, k) {
      if (typeof k !== STRING)
        throw new TypeError(k + ' key is not a string')
      if (k === 'toJSON' && typeof v === 'function') return
      if (replacer) {
        v = replacer.call(obj, k, v)
        if (v === undefined) {
          if (m === obj.size - 1 && str.length > 1) str = str.slice(0, -1)
          m++
          return
        }
      }
      str += JSON.stringify(k) + ':' + stringify(v, opts)
      if (m++ !== obj.size - 1) str += ','
    })
    str += '}'
  }
  else if (type === OBJECT) {
    str += '{'
    var keys = Object.keys(obj)
    for (var j = 0, len = keys.length; j < len; j++) {
      var k = keys[j]
      var v = obj[k]
      if (k === 'toJSON' && typeof v === 'function')
        continue
      if (replacer) {
        v = replacer.call(obj, k, v)
        if (v === undefined) {
          if (j === len - 1 && str.length > 1) str = str.slice(0, -1)
          continue
        }
      }
      str += JSON.stringify(k) + ':' + stringify(v, opts)
      if (j !== len - 1) str += ','
    }
    str += '}'
  }
  else {
    throw new TypeError(obj + ' is not JSON valid')
  }

  return str
}

module.exports = function serialize(obj, options) {
  options = typeof options === 'object' && options !== null ? options : Object.create(null)
  var opts = Object.create(null)
  opts.toJSON = options.toJSON !== false
  opts.replacer = typeof options.replacer === 'function' && options.replacer

  var string = stringify(obj, opts)
  var tspace = typeof options.space
  if (tspace === 'string' || tspace === 'number')
    string = JSON.stringify(JSON.parse(string), null, options.space)
  return string
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./types":21}],20:[function(require,module,exports){
(function (global){
'use strict'

var types = require('./types')
var OBJECT = types.OBJECT
var ARRAY = types.ARRAY
var NULL = types.NULL
var STRING = types.STRING
var BOOLEAN = types.BOOLEAN
var NUMBER = types.NUMBER

module.exports = function type(obj) {
  var t = typeof obj

  if (t === BOOLEAN || t === STRING) return t
  else if (t === NUMBER && isFinite(obj)) return NUMBER
  else if (t === OBJECT) {
    if (Array.isArray(obj)) return ARRAY
    else if (global.Set && obj instanceof Set) return ARRAY
    else if (global.Map && obj instanceof Map) return OBJECT
    else if (obj === null) return NULL
    else if (t === OBJECT) return OBJECT
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./types":21}],21:[function(require,module,exports){
'use strict'

var NUMBER = exports.NUMBER = 'number'
var BOOLEAN = exports.BOOLEAN = 'boolean'
var NULL = exports.NULL = 'null'
var STRING = exports.STRING = 'string'
exports.PRIMITIVES = [NUMBER, BOOLEAN, NULL, STRING]

var ARRAY = exports.ARRAY = 'array'
var OBJECT = exports.OBJECT = 'object'
exports.STRUCTURES = [ARRAY, OBJECT]

},{}],22:[function(require,module,exports){
(function (global){
'use strict'

var types = require('./types')
var OBJECT = types.OBJECT
var STRING = types.STRING
var BOOLEAN = types.BOOLEAN
var NUMBER = types.NUMBER

module.exports = function valid(obj) {
  var type = typeof obj
  switch (type) {
    case STRING:
    case BOOLEAN:
      return true
    case NUMBER:
      return isFinite(obj)
  }

  if (obj === null)
    return true
  else if (type !== OBJECT)
    return false

  var i, l, item

  if (global.Set && obj instanceof Set) {
    var values = obj.values()
    for (i = 0, l = obj.size; i < l; i++)
      if (!valid(values.next().value)) return false
    return true
  }

  if (global.Map && obj instanceof Map) {
    var entries = obj.entries()
    for (i = 0, l = obj.size; i < l; i++) {
      item = entries.next().value
      if (typeof item[0] !== 'string') return false
      else if (!valid(item[1])) return false
    }
    return true
  }

  if (Array.isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++)
      if (!valid(obj[i])) return false
    return true
  }

  var keys = Object.keys(obj)
  for (i = 0, l = keys.length; i < l; i++)
    if (!valid(obj[keys[i]])) return false
  return true
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./types":21}]},{},[1])(1)
});